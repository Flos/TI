/* Generated By:JavaCC: Do not edit this line. WHILE0.java */
import java.util.HashMap;


public class WHILE0 implements WHILE0Constants {
  public static HashMap<String, Integer> vars = new HashMap<String, Integer >();
  public static Integer nextFreeRegister = 1;
  public static Integer nextFreeLabel = 1;

  public static void main(String args []) throws ParseException
  {
        WHILE0 parser = new WHILE0(System.in);
        /*whileProgramm = "bla(in a, b; out y); \n"
					+ "var();"
					+ "a = 0";
    WHILE0 parser = new WHILE0(whileProgramm);
    */
        System.out.println("Reading from standard input...");
        System.out.println("Enter an WHILE0-Program:");
        try
        {
            String urm = WHILE0.while0();
            System.out.println(urm);
        }
        catch (Exception e)
        {
            System.out.println("NOK.");
            System.out.println(e.getMessage());
            WHILE0.ReInit(System.in);
        }
        catch (Error e)
        {
            System.out.println("Oops.");
            System.out.println(e.getMessage());
        }
  }

  static final public String while0() throws ParseException {
 String sequenz = ""; String inVars = ""; String outVar = "";
    jj_consume_token(VAR);
    jj_consume_token(13);
    inVars = inVars();
    jj_consume_token(14);
    outVar = outVar();
    jj_consume_token(15);
    jj_consume_token(14);
    jj_consume_token(L_VAR);
    jj_consume_token(13);
    hilfsVars();
    jj_consume_token(15);
    jj_consume_token(14);
    //var( H1 );
    
            sequenz = sequenz();
    jj_consume_token(0);
        {if (true) return inVars + sequenz + "\u005cn" + outVar + "\u005cn";}
    throw new Error("Missing return statement in function");
  }

  static final public String inVars() throws ParseException {
 String s = "in(";
    jj_consume_token(L_IN);
    jj_consume_token(VAR);
                s += "R" + nextFreeRegister;
        vars.put(token.image, nextFreeRegister++);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(16);
      jj_consume_token(VAR);
                        if (vars.containsKey(token.image))
                        {
                        {if (true) throw new ParseException("Variablen name mehrmals vergeben");}
                }
                s += ", R" + nextFreeRegister;
                vars.put(token.image, nextFreeRegister++);
    }
                {if (true) return s + ")\u005cn";}
    throw new Error("Missing return statement in function");
  }

  static final public String outVar() throws ParseException {
 String s = "out(";
    jj_consume_token(L_OUT);
    jj_consume_token(VAR);
    if (vars.containsKey(token.image))
        {
      {if (true) throw new ParseException("Variablen name mehrmals vergeben");}
        }
        s += "R" + nextFreeRegister;
    vars.put(token.image, nextFreeRegister++);

    {if (true) return s + ")\u005cn";}
    throw new Error("Missing return statement in function");
  }

  static final public void hilfsVars() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
                        if (vars.containsKey(token.image))
                        {
                                {if (true) throw new ParseException("Variablen name mehrmals vergeben");}
                }
                vars.put(token.image, nextFreeRegister++);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(16);
        jj_consume_token(VAR);
                        if (vars.containsKey(token.image))
                        {
                                {if (true) throw new ParseException("Variablen name mehrmals vergeben");}
                        }
                        vars.put(token.image, nextFreeRegister++);
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public String anweisung() throws ParseException {
 String s = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      s = zuweisung();
      break;
    case L_WHILE:
      s = whileSchleife();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String zuweisung() throws ParseException {
 Integer var1 = 0; Integer var2 = 0; Integer label1 = 0; Integer label2 = 0; String s = "";
    jj_consume_token(VAR);
                var1 = vars.get(token.image);
    jj_consume_token(17);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
                          var2 = vars.get(token.image);
      jj_consume_token(18);
      jj_consume_token(19);
                          if(var1 == var2)
                          {
                            s += "R" + var1 + "++;";
                          }
                          else
                          {
                            s += "R" + var1 + " = 0;\u005cn";
                            label1 = nextFreeLabel++;
                            label2 = nextFreeLabel++;
                            s += "LABEL" + label1 + " if " + "R" + var1 + " == " + "R" + var2 + " goto LABEL" + label2 + "\u005cn";
                            s += "R" + var1 + "++;\u005cn";
                            s += "goto LABEL" + label1 + "\u005cn";
                            s += "LABEL" + label2 + " R" + var1 + "++;\u005cn";
                          }
      break;
    case 20:
      jj_consume_token(20);
                        s += "R" + var1 + " = 0;\u005cn";
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String whileSchleife() throws ParseException {
 Integer var1 = 0; Integer var2 = 0; Integer label1 = 0; Integer label2 = 0; String s = ""; String neu = "";
    jj_consume_token(L_WHILE);
    jj_consume_token(VAR);
                var1 = vars.get(token.image);
    jj_consume_token(21);
    jj_consume_token(VAR);
                var2 = vars.get(token.image);
                label1 = nextFreeLabel++;
                label2 = nextFreeLabel++;

                s += "LABLE" + label1 + " if R" + var1 + " == R" + var2 + " goto LABLE" + label2 + "\u005cn";
    jj_consume_token(L_DO);
    jj_consume_token(L_BEGIN);
    neu = sequenz();
    jj_consume_token(L_END);
                s += neu;
                s += "goto LABLE" + label1 + "\u005cn";
                s += "LABLE" + label2 + " ";
                {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String sequenz() throws ParseException {
 String s = "";String neueAnweisung = "";
    s = anweisung();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(14);
      neueAnweisung = anweisung();
                        s += neueAnweisung;
    }
                {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public WHILE0TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000,0x10000,0x1000,0x1020,0x101000,0x4000,};
   }

  /** Constructor with InputStream. */
  public WHILE0(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public WHILE0(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new WHILE0TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public WHILE0(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new WHILE0TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public WHILE0(WHILE0TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(WHILE0TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[22];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
